syntax = "proto3";

package notifications;

option go_package = "gitlab.com/go-msuite/notifications/pb";

import "common/pb/annotations.proto";
import "common/pb/common.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validator.proto";

service Notifications {
    rpc Subscribe(SubscribeReq) returns (msgs.UUID) {
        option (google.api.http) = {
            post: "/notifications/v1/subscribe"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Subscribe user"
            description: "Used to register user with notification service with respective handles."
            tags: "Notifications"
        };
    }

    rpc Send(SendReq) returns (Notification) {
        option (google.api.http) = {
            post: "/notifications/v1/send"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Send Message"
            description: "Used to send message to the user on one of the subscribed channel or one provided in the request."
            tags: "Notifications"
        };
    }

    rpc Get(msgs.UUIDs) returns (NotificationList) {
        option (google.api.http) = {
            get: "/notifications/v1/get"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get notifications"
            description: "Used to get notifications by ID."
            tags: "Notifications"
        };
    }
}

enum NotificationType {
    RESERVED    = 0;
    EMAIL       = 1;
    SMS         = 2;
    WEB         = 4;
    ANDROID     = 8;
    IOS         = 16;
    // Pull type is basically a notification which will be pulled
    // by client subsequently. We just need to save the notification
    // in this case.
    // The value is such that, any of the WEB, ANDROID or IOS providers
    // can be used to send the notification if they exist.
    PULL        = 28;
}

message SubscriberInfo {
    NotificationType  mode  = 1 [(validator.field) = {is_in_enum : true}];
    string            identifier = 2 [(validator.field) = {string_not_empty : true}];
}

message SubscribeReq {
    string user_id = 1;
    repeated SubscriberInfo subscriptions = 2 [(validator.field) = {repeated_count_min : 1}];
}

message Msg {
    string from = 1;
    string to = 2;
    string title = 3;
    string body = 4;
}

message SendReq {
    NotificationType type    = 1 [(validator.field) = {is_in_enum: true}];
    string           user_id = 2;
    Msg              data    = 3;
}

message Notification {
    string           id      = 1;
    string           user_id = 2;
    NotificationType type    = 3;
    Msg              data    = 4;
    int64            created = 98;
    int64            updated = 99;
}

message NotificationList {
    repeated Notification items = 1;
}


// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: payments.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency int32

const (
	Currency_RESERVED Currency = 0
	Currency_AFN      Currency = 1
	Currency_ALL      Currency = 2
	Currency_AMD      Currency = 3
	Currency_ANG      Currency = 4
	Currency_ARS      Currency = 5
	Currency_AUD      Currency = 6
	Currency_AWG      Currency = 7
	Currency_AZN      Currency = 8
	Currency_BAM      Currency = 9
	Currency_BBD      Currency = 10
	Currency_BGN      Currency = 11
	Currency_BHD      Currency = 12
	Currency_BMD      Currency = 13
	Currency_BND      Currency = 14
	Currency_BOB      Currency = 15
	Currency_BRL      Currency = 16
	Currency_BSD      Currency = 17
	Currency_BWP      Currency = 18
	Currency_BYN      Currency = 19
	Currency_BYR      Currency = 20
	Currency_BZD      Currency = 21
	Currency_CAD      Currency = 22
	Currency_CLP      Currency = 23
	Currency_CNY      Currency = 24
	Currency_COP      Currency = 25
	Currency_CRC      Currency = 26
	Currency_CUP      Currency = 27
	Currency_CZK      Currency = 28
	Currency_DKK      Currency = 29
	Currency_DOP      Currency = 30
	Currency_DZD      Currency = 31
	Currency_EEK      Currency = 32
	Currency_EGP      Currency = 33
	Currency_EUR      Currency = 34
	Currency_FJD      Currency = 35
	Currency_FKP      Currency = 36
	Currency_GBP      Currency = 37
	Currency_GGP      Currency = 38
	Currency_GHC      Currency = 39
	Currency_GIP      Currency = 40
	Currency_GTQ      Currency = 41
	Currency_GYD      Currency = 42
	Currency_HKD      Currency = 43
	Currency_HNL      Currency = 44
	Currency_HRK      Currency = 45
	Currency_HUF      Currency = 46
	Currency_IDR      Currency = 47
	Currency_ILS      Currency = 48
	Currency_IMP      Currency = 49
	Currency_INR      Currency = 50
	Currency_IQD      Currency = 51
	Currency_IRR      Currency = 52
	Currency_ISK      Currency = 53
	Currency_JEP      Currency = 54
	Currency_JMD      Currency = 55
	Currency_JOD      Currency = 56
	Currency_JPY      Currency = 57
	Currency_KES      Currency = 58
	Currency_KGS      Currency = 59
	Currency_KHR      Currency = 60
	Currency_KPW      Currency = 61
	Currency_KRW      Currency = 62
	Currency_KWD      Currency = 63
	Currency_KYD      Currency = 64
	Currency_KZT      Currency = 65
	Currency_LAK      Currency = 66
	Currency_LBP      Currency = 67
	Currency_LKR      Currency = 68
	Currency_LRD      Currency = 69
	Currency_LTL      Currency = 70
	Currency_LVL      Currency = 71
	Currency_LYD      Currency = 72
	Currency_MAD      Currency = 73
	Currency_MKD      Currency = 74
	Currency_MNT      Currency = 75
	Currency_MUR      Currency = 76
	Currency_MXN      Currency = 77
	Currency_MWK      Currency = 78
	Currency_MYR      Currency = 79
	Currency_MZN      Currency = 80
	Currency_NAD      Currency = 81
	Currency_NGN      Currency = 82
	Currency_NIO      Currency = 83
	Currency_NOK      Currency = 84
	Currency_NPR      Currency = 85
	Currency_NZD      Currency = 86
	Currency_OMR      Currency = 87
	Currency_PAB      Currency = 88
	Currency_PEN      Currency = 89
	Currency_PHP      Currency = 90
	Currency_PKR      Currency = 91
	Currency_PLN      Currency = 92
	Currency_PYG      Currency = 93
	Currency_QAR      Currency = 94
	Currency_RON      Currency = 95
	Currency_RSD      Currency = 96
	Currency_RUB      Currency = 97
	Currency_RUR      Currency = 98
	Currency_SAR      Currency = 99
	Currency_SBD      Currency = 100
	Currency_SCR      Currency = 101
	Currency_SEK      Currency = 102
	Currency_SGD      Currency = 103
	Currency_SHP      Currency = 104
	Currency_SOS      Currency = 105
	Currency_SRD      Currency = 106
	Currency_SVC      Currency = 107
	Currency_SYP      Currency = 108
	Currency_THB      Currency = 109
	Currency_TND      Currency = 110
	Currency_TRL      Currency = 111
	Currency_TRY      Currency = 112
	Currency_TTD      Currency = 113
	Currency_TWD      Currency = 114
	Currency_TZS      Currency = 115
	Currency_UAH      Currency = 116
	Currency_UGX      Currency = 117
	Currency_AED      Currency = 118
	Currency_UYU      Currency = 119
	Currency_UZS      Currency = 120
	Currency_VEF      Currency = 121
	Currency_VND      Currency = 122
	Currency_XCD      Currency = 123
	Currency_YER      Currency = 124
	Currency_ZAR      Currency = 125
	Currency_ZMW      Currency = 126
	Currency_ZWD      Currency = 127
	Currency_USD      Currency = 128
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:   "RESERVED",
		1:   "AFN",
		2:   "ALL",
		3:   "AMD",
		4:   "ANG",
		5:   "ARS",
		6:   "AUD",
		7:   "AWG",
		8:   "AZN",
		9:   "BAM",
		10:  "BBD",
		11:  "BGN",
		12:  "BHD",
		13:  "BMD",
		14:  "BND",
		15:  "BOB",
		16:  "BRL",
		17:  "BSD",
		18:  "BWP",
		19:  "BYN",
		20:  "BYR",
		21:  "BZD",
		22:  "CAD",
		23:  "CLP",
		24:  "CNY",
		25:  "COP",
		26:  "CRC",
		27:  "CUP",
		28:  "CZK",
		29:  "DKK",
		30:  "DOP",
		31:  "DZD",
		32:  "EEK",
		33:  "EGP",
		34:  "EUR",
		35:  "FJD",
		36:  "FKP",
		37:  "GBP",
		38:  "GGP",
		39:  "GHC",
		40:  "GIP",
		41:  "GTQ",
		42:  "GYD",
		43:  "HKD",
		44:  "HNL",
		45:  "HRK",
		46:  "HUF",
		47:  "IDR",
		48:  "ILS",
		49:  "IMP",
		50:  "INR",
		51:  "IQD",
		52:  "IRR",
		53:  "ISK",
		54:  "JEP",
		55:  "JMD",
		56:  "JOD",
		57:  "JPY",
		58:  "KES",
		59:  "KGS",
		60:  "KHR",
		61:  "KPW",
		62:  "KRW",
		63:  "KWD",
		64:  "KYD",
		65:  "KZT",
		66:  "LAK",
		67:  "LBP",
		68:  "LKR",
		69:  "LRD",
		70:  "LTL",
		71:  "LVL",
		72:  "LYD",
		73:  "MAD",
		74:  "MKD",
		75:  "MNT",
		76:  "MUR",
		77:  "MXN",
		78:  "MWK",
		79:  "MYR",
		80:  "MZN",
		81:  "NAD",
		82:  "NGN",
		83:  "NIO",
		84:  "NOK",
		85:  "NPR",
		86:  "NZD",
		87:  "OMR",
		88:  "PAB",
		89:  "PEN",
		90:  "PHP",
		91:  "PKR",
		92:  "PLN",
		93:  "PYG",
		94:  "QAR",
		95:  "RON",
		96:  "RSD",
		97:  "RUB",
		98:  "RUR",
		99:  "SAR",
		100: "SBD",
		101: "SCR",
		102: "SEK",
		103: "SGD",
		104: "SHP",
		105: "SOS",
		106: "SRD",
		107: "SVC",
		108: "SYP",
		109: "THB",
		110: "TND",
		111: "TRL",
		112: "TRY",
		113: "TTD",
		114: "TWD",
		115: "TZS",
		116: "UAH",
		117: "UGX",
		118: "AED",
		119: "UYU",
		120: "UZS",
		121: "VEF",
		122: "VND",
		123: "XCD",
		124: "YER",
		125: "ZAR",
		126: "ZMW",
		127: "ZWD",
		128: "USD",
	}
	Currency_value = map[string]int32{
		"RESERVED": 0,
		"AFN":      1,
		"ALL":      2,
		"AMD":      3,
		"ANG":      4,
		"ARS":      5,
		"AUD":      6,
		"AWG":      7,
		"AZN":      8,
		"BAM":      9,
		"BBD":      10,
		"BGN":      11,
		"BHD":      12,
		"BMD":      13,
		"BND":      14,
		"BOB":      15,
		"BRL":      16,
		"BSD":      17,
		"BWP":      18,
		"BYN":      19,
		"BYR":      20,
		"BZD":      21,
		"CAD":      22,
		"CLP":      23,
		"CNY":      24,
		"COP":      25,
		"CRC":      26,
		"CUP":      27,
		"CZK":      28,
		"DKK":      29,
		"DOP":      30,
		"DZD":      31,
		"EEK":      32,
		"EGP":      33,
		"EUR":      34,
		"FJD":      35,
		"FKP":      36,
		"GBP":      37,
		"GGP":      38,
		"GHC":      39,
		"GIP":      40,
		"GTQ":      41,
		"GYD":      42,
		"HKD":      43,
		"HNL":      44,
		"HRK":      45,
		"HUF":      46,
		"IDR":      47,
		"ILS":      48,
		"IMP":      49,
		"INR":      50,
		"IQD":      51,
		"IRR":      52,
		"ISK":      53,
		"JEP":      54,
		"JMD":      55,
		"JOD":      56,
		"JPY":      57,
		"KES":      58,
		"KGS":      59,
		"KHR":      60,
		"KPW":      61,
		"KRW":      62,
		"KWD":      63,
		"KYD":      64,
		"KZT":      65,
		"LAK":      66,
		"LBP":      67,
		"LKR":      68,
		"LRD":      69,
		"LTL":      70,
		"LVL":      71,
		"LYD":      72,
		"MAD":      73,
		"MKD":      74,
		"MNT":      75,
		"MUR":      76,
		"MXN":      77,
		"MWK":      78,
		"MYR":      79,
		"MZN":      80,
		"NAD":      81,
		"NGN":      82,
		"NIO":      83,
		"NOK":      84,
		"NPR":      85,
		"NZD":      86,
		"OMR":      87,
		"PAB":      88,
		"PEN":      89,
		"PHP":      90,
		"PKR":      91,
		"PLN":      92,
		"PYG":      93,
		"QAR":      94,
		"RON":      95,
		"RSD":      96,
		"RUB":      97,
		"RUR":      98,
		"SAR":      99,
		"SBD":      100,
		"SCR":      101,
		"SEK":      102,
		"SGD":      103,
		"SHP":      104,
		"SOS":      105,
		"SRD":      106,
		"SVC":      107,
		"SYP":      108,
		"THB":      109,
		"TND":      110,
		"TRL":      111,
		"TRY":      112,
		"TTD":      113,
		"TWD":      114,
		"TZS":      115,
		"UAH":      116,
		"UGX":      117,
		"AED":      118,
		"UYU":      119,
		"UZS":      120,
		"VEF":      121,
		"VND":      122,
		"XCD":      123,
		"YER":      124,
		"ZAR":      125,
		"ZMW":      126,
		"ZWD":      127,
		"USD":      128,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[0].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[0]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{0}
}

type ProviderId int32

const (
	ProviderId_PROVIDER_RESERVED ProviderId = 0
	ProviderId_RAZORPAY_FE       ProviderId = 1
)

// Enum value maps for ProviderId.
var (
	ProviderId_name = map[int32]string{
		0: "PROVIDER_RESERVED",
		1: "RAZORPAY_FE",
	}
	ProviderId_value = map[string]int32{
		"PROVIDER_RESERVED": 0,
		"RAZORPAY_FE":       1,
	}
)

func (x ProviderId) Enum() *ProviderId {
	p := new(ProviderId)
	*p = x
	return p
}

func (x ProviderId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderId) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[1].Descriptor()
}

func (ProviderId) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[1]
}

func (x ProviderId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderId.Descriptor instead.
func (ProviderId) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{1}
}

type ChargeStatus int32

const (
	ChargeStatus_CHARGE_RESERVED ChargeStatus = 0
	ChargeStatus_PAID            ChargeStatus = 1
	// Refunded type includes failure in payment processing.
	ChargeStatus_REFUNDED ChargeStatus = 2
)

// Enum value maps for ChargeStatus.
var (
	ChargeStatus_name = map[int32]string{
		0: "CHARGE_RESERVED",
		1: "PAID",
		2: "REFUNDED",
	}
	ChargeStatus_value = map[string]int32{
		"CHARGE_RESERVED": 0,
		"PAID":            1,
		"REFUNDED":        2,
	}
)

func (x ChargeStatus) Enum() *ChargeStatus {
	p := new(ChargeStatus)
	*p = x
	return p
}

func (x ChargeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[2].Descriptor()
}

func (ChargeStatus) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[2]
}

func (x ChargeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeStatus.Descriptor instead.
func (ChargeStatus) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{2}
}

type CardType int32

const (
	CardType_CARD_RESERVED CardType = 0
	CardType_MASTERCARD    CardType = 1
	CardType_VISA          CardType = 2
	CardType_AMEX          CardType = 3
	CardType_JCB           CardType = 4
	CardType_DISCOVER      CardType = 5
	CardType_DINERS_CLUB   CardType = 6
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "CARD_RESERVED",
		1: "MASTERCARD",
		2: "VISA",
		3: "AMEX",
		4: "JCB",
		5: "DISCOVER",
		6: "DINERS_CLUB",
	}
	CardType_value = map[string]int32{
		"CARD_RESERVED": 0,
		"MASTERCARD":    1,
		"VISA":          2,
		"AMEX":          3,
		"JCB":           4,
		"DISCOVER":      5,
		"DINERS_CLUB":   6,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[3].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[3]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{3}
}

type Refund_RefundType int32

const (
	Refund_REFUND_RESERVED  Refund_RefundType = 0
	Refund_PROVIDER_FAILURE Refund_RefundType = 1
	Refund_USER_REQUESTED   Refund_RefundType = 2
	Refund_SERVER_ERROR     Refund_RefundType = 3
	Refund_FRAUD            Refund_RefundType = 4
	Refund_DUPLICATE        Refund_RefundType = 5
)

// Enum value maps for Refund_RefundType.
var (
	Refund_RefundType_name = map[int32]string{
		0: "REFUND_RESERVED",
		1: "PROVIDER_FAILURE",
		2: "USER_REQUESTED",
		3: "SERVER_ERROR",
		4: "FRAUD",
		5: "DUPLICATE",
	}
	Refund_RefundType_value = map[string]int32{
		"REFUND_RESERVED":  0,
		"PROVIDER_FAILURE": 1,
		"USER_REQUESTED":   2,
		"SERVER_ERROR":     3,
		"FRAUD":            4,
		"DUPLICATE":        5,
	}
)

func (x Refund_RefundType) Enum() *Refund_RefundType {
	p := new(Refund_RefundType)
	*p = x
	return p
}

func (x Refund_RefundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Refund_RefundType) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[4].Descriptor()
}

func (Refund_RefundType) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[4]
}

func (x Refund_RefundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Refund_RefundType.Descriptor instead.
func (Refund_RefundType) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{1, 0}
}

type ListReq_Sort int32

const (
	ListReq_Natural     ListReq_Sort = 0
	ListReq_CreatedDesc ListReq_Sort = 1
	ListReq_CreatedAsc  ListReq_Sort = 2
	ListReq_UpdatedDesc ListReq_Sort = 3
	ListReq_UpdatedAsc  ListReq_Sort = 4
)

// Enum value maps for ListReq_Sort.
var (
	ListReq_Sort_name = map[int32]string{
		0: "Natural",
		1: "CreatedDesc",
		2: "CreatedAsc",
		3: "UpdatedDesc",
		4: "UpdatedAsc",
	}
	ListReq_Sort_value = map[string]int32{
		"Natural":     0,
		"CreatedDesc": 1,
		"CreatedAsc":  2,
		"UpdatedDesc": 3,
		"UpdatedAsc":  4,
	}
)

func (x ListReq_Sort) Enum() *ListReq_Sort {
	p := new(ListReq_Sort)
	*p = x
	return p
}

func (x ListReq_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListReq_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_payments_proto_enumTypes[5].Descriptor()
}

func (ListReq_Sort) Type() protoreflect.EnumType {
	return &file_payments_proto_enumTypes[5]
}

func (x ListReq_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListReq_Sort.Descriptor instead.
func (ListReq_Sort) EnumDescriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{7, 0}
}

type Charge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeId string     `protobuf:"bytes,1,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
	Provider ProviderId `protobuf:"varint,2,opt,name=provider,proto3,enum=payments.ProviderId" json:"provider,omitempty"`
	Currency Currency   `protobuf:"varint,3,opt,name=currency,proto3,enum=payments.Currency" json:"currency,omitempty"`
	// Types that are assignable to Source:
	//	*Charge_UserId
	//	*Charge_Card
	//	*Charge_VoucherId
	Source       isCharge_Source   `protobuf_oneof:"Source"`
	ChargeAmount int64             `protobuf:"varint,7,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount,omitempty"`
	RefundAmount int64             `protobuf:"varint,8,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	Status       ChargeStatus      `protobuf:"varint,9,opt,name=status,proto3,enum=payments.ChargeStatus" json:"status,omitempty"`
	ProviderRef  string            `protobuf:"bytes,10,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	RefundInfo   []*Refund         `protobuf:"bytes,11,rep,name=refund_info,json=refundInfo,proto3" json:"refund_info,omitempty"`
	Email        string            `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Statement    string            `protobuf:"bytes,13,opt,name=statement,proto3" json:"statement,omitempty"`
	Meta         map[string]string `protobuf:"bytes,14,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Created      int64             `protobuf:"varint,98,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int64             `protobuf:"varint,99,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Charge) Reset() {
	*x = Charge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charge) ProtoMessage() {}

func (x *Charge) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charge.ProtoReflect.Descriptor instead.
func (*Charge) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{0}
}

func (x *Charge) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

func (x *Charge) GetProvider() ProviderId {
	if x != nil {
		return x.Provider
	}
	return ProviderId_PROVIDER_RESERVED
}

func (x *Charge) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_RESERVED
}

func (m *Charge) GetSource() isCharge_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Charge) GetUserId() string {
	if x, ok := x.GetSource().(*Charge_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *Charge) GetCard() *Card {
	if x, ok := x.GetSource().(*Charge_Card); ok {
		return x.Card
	}
	return nil
}

func (x *Charge) GetVoucherId() string {
	if x, ok := x.GetSource().(*Charge_VoucherId); ok {
		return x.VoucherId
	}
	return ""
}

func (x *Charge) GetChargeAmount() int64 {
	if x != nil {
		return x.ChargeAmount
	}
	return 0
}

func (x *Charge) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Charge) GetStatus() ChargeStatus {
	if x != nil {
		return x.Status
	}
	return ChargeStatus_CHARGE_RESERVED
}

func (x *Charge) GetProviderRef() string {
	if x != nil {
		return x.ProviderRef
	}
	return ""
}

func (x *Charge) GetRefundInfo() []*Refund {
	if x != nil {
		return x.RefundInfo
	}
	return nil
}

func (x *Charge) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Charge) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *Charge) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Charge) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Charge) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type isCharge_Source interface {
	isCharge_Source()
}

type Charge_UserId struct {
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof"`
}

type Charge_Card struct {
	Card *Card `protobuf:"bytes,5,opt,name=card,proto3,oneof"`
}

type Charge_VoucherId struct {
	VoucherId string `protobuf:"bytes,6,opt,name=voucher_id,json=voucherId,proto3,oneof"`
}

func (*Charge_UserId) isCharge_Source() {}

func (*Charge_Card) isCharge_Source() {}

func (*Charge_VoucherId) isCharge_Source() {}

type Refund struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         Refund_RefundType `protobuf:"varint,1,opt,name=type,proto3,enum=payments.Refund_RefundType" json:"type,omitempty"`
	RefundId     string            `protobuf:"bytes,2,opt,name=refund_id,json=refundId,proto3" json:"refund_id,omitempty"`
	RefundAmount int64             `protobuf:"varint,3,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	ProviderRef  string            `protobuf:"bytes,4,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	Created      int64             `protobuf:"varint,98,opt,name=created,proto3" json:"created,omitempty"`
	Updated      int64             `protobuf:"varint,99,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Refund) Reset() {
	*x = Refund{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refund) ProtoMessage() {}

func (x *Refund) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refund.ProtoReflect.Descriptor instead.
func (*Refund) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{1}
}

func (x *Refund) GetType() Refund_RefundType {
	if x != nil {
		return x.Type
	}
	return Refund_REFUND_RESERVED
}

func (x *Refund) GetRefundId() string {
	if x != nil {
		return x.RefundId
	}
	return ""
}

func (x *Refund) GetRefundAmount() int64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Refund) GetProviderRef() string {
	if x != nil {
		return x.ProviderRef
	}
	return ""
}

func (x *Refund) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Refund) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardNumber  string   `protobuf:"bytes,1,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	ExpireMonth string   `protobuf:"bytes,2,opt,name=expire_month,json=expireMonth,proto3" json:"expire_month,omitempty"`
	ExpireYear  string   `protobuf:"bytes,3,opt,name=expire_year,json=expireYear,proto3" json:"expire_year,omitempty"`
	FirstName   string   `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string   `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Cvc         string   `protobuf:"bytes,6,opt,name=cvc,proto3" json:"cvc,omitempty"`
	Type        CardType `protobuf:"varint,7,opt,name=type,proto3,enum=payments.CardType" json:"type,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{2}
}

func (x *Card) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *Card) GetExpireMonth() string {
	if x != nil {
		return x.ExpireMonth
	}
	return ""
}

func (x *Card) GetExpireYear() string {
	if x != nil {
		return x.ExpireYear
	}
	return ""
}

func (x *Card) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Card) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Card) GetCvc() string {
	if x != nil {
		return x.Cvc
	}
	return ""
}

func (x *Card) GetType() CardType {
	if x != nil {
		return x.Type
	}
	return CardType_CARD_RESERVED
}

type ChargeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider ProviderId `protobuf:"varint,1,opt,name=provider,proto3,enum=payments.ProviderId" json:"provider,omitempty"`
	Currency Currency   `protobuf:"varint,2,opt,name=currency,proto3,enum=payments.Currency" json:"currency,omitempty"`
	Amount   int64      `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Types that are assignable to Source:
	//	*ChargeReq_UserId
	//	*ChargeReq_Card
	//	*ChargeReq_VoucherId
	Source    isChargeReq_Source `protobuf_oneof:"Source"`
	Email     string             `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Statement string             `protobuf:"bytes,9,opt,name=statement,proto3" json:"statement,omitempty"`
	Meta      map[string]string  `protobuf:"bytes,10,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChargeReq) Reset() {
	*x = ChargeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeReq) ProtoMessage() {}

func (x *ChargeReq) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeReq.ProtoReflect.Descriptor instead.
func (*ChargeReq) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{3}
}

func (x *ChargeReq) GetProvider() ProviderId {
	if x != nil {
		return x.Provider
	}
	return ProviderId_PROVIDER_RESERVED
}

func (x *ChargeReq) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_RESERVED
}

func (x *ChargeReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (m *ChargeReq) GetSource() isChargeReq_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ChargeReq) GetUserId() string {
	if x, ok := x.GetSource().(*ChargeReq_UserId); ok {
		return x.UserId
	}
	return ""
}

func (x *ChargeReq) GetCard() *Card {
	if x, ok := x.GetSource().(*ChargeReq_Card); ok {
		return x.Card
	}
	return nil
}

func (x *ChargeReq) GetVoucherId() string {
	if x, ok := x.GetSource().(*ChargeReq_VoucherId); ok {
		return x.VoucherId
	}
	return ""
}

func (x *ChargeReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ChargeReq) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *ChargeReq) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type isChargeReq_Source interface {
	isChargeReq_Source()
}

type ChargeReq_UserId struct {
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof"`
}

type ChargeReq_Card struct {
	Card *Card `protobuf:"bytes,5,opt,name=card,proto3,oneof"`
}

type ChargeReq_VoucherId struct {
	VoucherId string `protobuf:"bytes,7,opt,name=voucher_id,json=voucherId,proto3,oneof"`
}

func (*ChargeReq_UserId) isChargeReq_Source() {}

func (*ChargeReq_Card) isChargeReq_Source() {}

func (*ChargeReq_VoucherId) isChargeReq_Source() {}

type RefundReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeId    string            `protobuf:"bytes,1,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
	Type        Refund_RefundType `protobuf:"varint,2,opt,name=type,proto3,enum=payments.Refund_RefundType" json:"type,omitempty"`
	Amount      int64             `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency    Currency          `protobuf:"varint,4,opt,name=currency,proto3,enum=payments.Currency" json:"currency,omitempty"`
	ProviderRef string            `protobuf:"bytes,5,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
}

func (x *RefundReq) Reset() {
	*x = RefundReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefundReq) ProtoMessage() {}

func (x *RefundReq) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefundReq.ProtoReflect.Descriptor instead.
func (*RefundReq) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{4}
}

func (x *RefundReq) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

func (x *RefundReq) GetType() Refund_RefundType {
	if x != nil {
		return x.Type
	}
	return Refund_REFUND_RESERVED
}

func (x *RefundReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RefundReq) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_RESERVED
}

func (x *RefundReq) GetProviderRef() string {
	if x != nil {
		return x.ProviderRef
	}
	return ""
}

type Charges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charges []*Charge `protobuf:"bytes,1,rep,name=charges,proto3" json:"charges,omitempty"`
}

func (x *Charges) Reset() {
	*x = Charges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Charges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Charges) ProtoMessage() {}

func (x *Charges) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Charges.ProtoReflect.Descriptor instead.
func (*Charges) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{5}
}

func (x *Charges) GetCharges() []*Charge {
	if x != nil {
		return x.Charges
	}
	return nil
}

type IDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []string `protobuf:"bytes,1,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *IDs) Reset() {
	*x = IDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDs) ProtoMessage() {}

func (x *IDs) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDs.ProtoReflect.Descriptor instead.
func (*IDs) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{6}
}

func (x *IDs) GetVals() []string {
	if x != nil {
		return x.Vals
	}
	return nil
}

type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int64        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit   int64        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort    ListReq_Sort `protobuf:"varint,3,opt,name=sort,proto3,enum=payments.ListReq_Sort" json:"sort,omitempty"`
	Version int64        `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_payments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_payments_proto_rawDescGZIP(), []int{7}
}

func (x *ListReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListReq) GetSort() ListReq_Sort {
	if x != nil {
		return x.Sort
	}
	return ListReq_Natural
}

func (x *ListReq) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_payments_proto protoreflect.FileDescriptor

var file_payments_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x94, 0x05, 0x0a, 0x06, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x37,
	0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0xcb, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x52, 0x41, 0x55, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x22,
	0xe1, 0x01, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0a,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x35,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73,
	0x22, 0xd0, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x04,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x63,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73,
	0x63, 0x10, 0x04, 0x2a, 0x99, 0x09, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x46, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x55, 0x44, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x47, 0x10, 0x07, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x5a, 0x4e, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x4d, 0x10, 0x09, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x42, 0x44, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10,
	0x0b, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x44, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4d,
	0x44, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x4f, 0x42, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x10, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x10, 0x12,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x4e, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x52,
	0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x5a, 0x44, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x41, 0x44, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x50, 0x10, 0x17, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x4e, 0x59, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4f, 0x50, 0x10, 0x19, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x52, 0x43, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x50, 0x10,
	0x1b, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b,
	0x4b, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x50, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x5a, 0x44, 0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x45, 0x4b, 0x10, 0x20, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x47, 0x50, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10, 0x22,
	0x12, 0x07, 0x0a, 0x03, 0x46, 0x4a, 0x44, 0x10, 0x23, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x4b, 0x50,
	0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x47, 0x50, 0x10, 0x26, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48, 0x43, 0x10, 0x27, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x49, 0x50, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x51, 0x10, 0x29, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x59, 0x44, 0x10, 0x2a, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10,
	0x2b, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4e, 0x4c, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x52,
	0x4b, 0x10, 0x2d, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03,
	0x49, 0x44, 0x52, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x30, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x4d, 0x50, 0x10, 0x31, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x32,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x44, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x52,
	0x10, 0x34, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x4a,
	0x45, 0x50, 0x10, 0x36, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x10, 0x37, 0x12, 0x07, 0x0a,
	0x03, 0x4a, 0x4f, 0x44, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x59, 0x10, 0x39, 0x12,
	0x07, 0x0a, 0x03, 0x4b, 0x45, 0x53, 0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10,
	0x3b, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x48, 0x52, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x50,
	0x57, 0x10, 0x3d, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03,
	0x4b, 0x57, 0x44, 0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x59, 0x44, 0x10, 0x40, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x5a, 0x54, 0x10, 0x41, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4b, 0x10, 0x42,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x10, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x52,
	0x10, 0x44, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x52, 0x44, 0x10, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x54, 0x4c, 0x10, 0x46, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x56, 0x4c, 0x10, 0x47, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x59, 0x44, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x44, 0x10, 0x49, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x4b, 0x44, 0x10, 0x4a, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x54, 0x10,
	0x4b, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x52, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x58,
	0x4e, 0x10, 0x4d, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x59, 0x52, 0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x10, 0x50, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x41, 0x44, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x10, 0x52,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x4f, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x4b,
	0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x5a, 0x44, 0x10, 0x56, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4d, 0x52, 0x10, 0x57, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x41, 0x42, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4e, 0x10, 0x59, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b, 0x52, 0x10,
	0x5b, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4c, 0x4e, 0x10, 0x5c, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x59,
	0x47, 0x10, 0x5d, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x41, 0x52, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x4f, 0x4e, 0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x44, 0x10, 0x60, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x55, 0x42, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x52, 0x10, 0x62,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x10, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x42, 0x44,
	0x10, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x43, 0x52, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x45, 0x4b, 0x10, 0x66, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x47, 0x44, 0x10, 0x67, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x48, 0x50, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x53, 0x10, 0x69, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x52, 0x44, 0x10, 0x6a, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x56, 0x43, 0x10,
	0x6b, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x59, 0x50, 0x10, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48,
	0x42, 0x10, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10, 0x6e, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x52, 0x4c, 0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x52, 0x59, 0x10, 0x70, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x54, 0x44, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x57, 0x44, 0x10, 0x72,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x5a, 0x53, 0x10, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x41, 0x48,
	0x10, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x47, 0x58, 0x10, 0x75, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x45, 0x44, 0x10, 0x76, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x59, 0x55, 0x10, 0x77, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x5a, 0x53, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x45, 0x46, 0x10, 0x79, 0x12,
	0x07, 0x0a, 0x03, 0x56, 0x4e, 0x44, 0x10, 0x7a, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x43, 0x44, 0x10,
	0x7b, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x52, 0x10, 0x7c, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x41,
	0x52, 0x10, 0x7d, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x4d, 0x57, 0x10, 0x7e, 0x12, 0x07, 0x0a, 0x03,
	0x5a, 0x57, 0x44, 0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x80, 0x01, 0x2a,
	0x34, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x5a, 0x4f, 0x52, 0x50, 0x41, 0x59,
	0x5f, 0x46, 0x45, 0x10, 0x01, 0x2a, 0x3b, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x69, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49, 0x53, 0x41, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x4d, 0x45, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x43, 0x42, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x49, 0x4e, 0x45, 0x52, 0x53, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x06, 0x32, 0xd4, 0x01,
	0x0a, 0x08, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x4e, 0x65,
	0x77, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x03, 0x47, 0x65, 0x74,
	0x12, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x44, 0x73, 0x1a,
	0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x6f, 0x6b, 0x6e, 0x65, 0x72, 0x75, 0x72, 0x6b, 0x61, 0x72, 0x2f,
	0x6d, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_payments_proto_rawDescOnce sync.Once
	file_payments_proto_rawDescData = file_payments_proto_rawDesc
)

func file_payments_proto_rawDescGZIP() []byte {
	file_payments_proto_rawDescOnce.Do(func() {
		file_payments_proto_rawDescData = protoimpl.X.CompressGZIP(file_payments_proto_rawDescData)
	})
	return file_payments_proto_rawDescData
}

var file_payments_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_payments_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_payments_proto_goTypes = []interface{}{
	(Currency)(0),          // 0: payments.Currency
	(ProviderId)(0),        // 1: payments.ProviderId
	(ChargeStatus)(0),      // 2: payments.ChargeStatus
	(CardType)(0),          // 3: payments.CardType
	(Refund_RefundType)(0), // 4: payments.Refund.RefundType
	(ListReq_Sort)(0),      // 5: payments.ListReq.Sort
	(*Charge)(nil),         // 6: payments.Charge
	(*Refund)(nil),         // 7: payments.Refund
	(*Card)(nil),           // 8: payments.Card
	(*ChargeReq)(nil),      // 9: payments.ChargeReq
	(*RefundReq)(nil),      // 10: payments.RefundReq
	(*Charges)(nil),        // 11: payments.Charges
	(*IDs)(nil),            // 12: payments.IDs
	(*ListReq)(nil),        // 13: payments.ListReq
	nil,                    // 14: payments.Charge.MetaEntry
	nil,                    // 15: payments.ChargeReq.MetaEntry
}
var file_payments_proto_depIdxs = []int32{
	1,  // 0: payments.Charge.provider:type_name -> payments.ProviderId
	0,  // 1: payments.Charge.currency:type_name -> payments.Currency
	8,  // 2: payments.Charge.card:type_name -> payments.Card
	2,  // 3: payments.Charge.status:type_name -> payments.ChargeStatus
	7,  // 4: payments.Charge.refund_info:type_name -> payments.Refund
	14, // 5: payments.Charge.meta:type_name -> payments.Charge.MetaEntry
	4,  // 6: payments.Refund.type:type_name -> payments.Refund.RefundType
	3,  // 7: payments.Card.type:type_name -> payments.CardType
	1,  // 8: payments.ChargeReq.provider:type_name -> payments.ProviderId
	0,  // 9: payments.ChargeReq.currency:type_name -> payments.Currency
	8,  // 10: payments.ChargeReq.card:type_name -> payments.Card
	15, // 11: payments.ChargeReq.meta:type_name -> payments.ChargeReq.MetaEntry
	4,  // 12: payments.RefundReq.type:type_name -> payments.Refund.RefundType
	0,  // 13: payments.RefundReq.currency:type_name -> payments.Currency
	6,  // 14: payments.Charges.charges:type_name -> payments.Charge
	5,  // 15: payments.ListReq.sort:type_name -> payments.ListReq.Sort
	9,  // 16: payments.Payments.NewCharge:input_type -> payments.ChargeReq
	10, // 17: payments.Payments.RefundCharge:input_type -> payments.RefundReq
	12, // 18: payments.Payments.Get:input_type -> payments.IDs
	13, // 19: payments.Payments.List:input_type -> payments.ListReq
	6,  // 20: payments.Payments.NewCharge:output_type -> payments.Charge
	7,  // 21: payments.Payments.RefundCharge:output_type -> payments.Refund
	11, // 22: payments.Payments.Get:output_type -> payments.Charges
	11, // 23: payments.Payments.List:output_type -> payments.Charges
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_payments_proto_init() }
func file_payments_proto_init() {
	if File_payments_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refund); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefundReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Charges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payments_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Charge_UserId)(nil),
		(*Charge_Card)(nil),
		(*Charge_VoucherId)(nil),
	}
	file_payments_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ChargeReq_UserId)(nil),
		(*ChargeReq_Card)(nil),
		(*ChargeReq_VoucherId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payments_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_payments_proto_goTypes,
		DependencyIndexes: file_payments_proto_depIdxs,
		EnumInfos:         file_payments_proto_enumTypes,
		MessageInfos:      file_payments_proto_msgTypes,
	}.Build()
	File_payments_proto = out.File
	file_payments_proto_rawDesc = nil
	file_payments_proto_goTypes = nil
	file_payments_proto_depIdxs = nil
}

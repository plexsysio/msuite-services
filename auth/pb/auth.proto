syntax = "proto3";

package auth;

import "common/pb/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validator.proto";

option go_package = "github.com/plexsysio/msuite-services/auth/pb";

enum LoginType {
    None            = 0;
    Email           = 1;
    Mobile          = 2;
    OAuthProvider   = 3;
}

message AuthCredentials {
    LoginType type  = 1 [(validator.field) = {is_in_enum: true}];
    string username = 2 [(validator.field) = {string_not_empty: true}];
    string password = 3;
}

message VerifyReq {
    string          code  = 1 [(validator.field) = {string_not_empty: true}];
    AuthCredentials creds = 2 [(validator.field) = {msg_exists : true}];
}

message AuthResponse {}

message AuthResult {
    string user_id       = 1 [(validator.field) = {string_not_empty: true}];
    string access_token  = 2 [(validator.field) = {string_not_empty: true}];
    string refresh_token = 3 [(validator.field) = {string_not_empty: true}];
}

message UpdateCredentials {
    string user_id      = 1 [(validator.field) = {string_not_empty: true}];
    string new_password = 2 [(validator.field) = {string_not_empty: true}];
    string old_password = 3 [(validator.field) = {string_not_empty: true}];
    string access_token = 4 [(validator.field) = {string_not_empty: true}];
}

message UnverifiedUser {
    string          code     = 1;
    LoginType       type     = 2;
    string          username = 3;
    bytes           password = 4;
    bool            verified = 5;
    int64           created  = 98;
    int64           updated  = 99;
}

message VerifiedUser {
    string          UserId       = 1;
    LoginType       type         = 2;
    string          username     = 3;
    bytes           password     = 4;
    bytes           temp_pwd     = 5;
    bool            use_temp_pwd = 6;
    string          role         = 7;
    int64           created      = 98;
    int64           updated      = 99;
}

service Auth {

    // Used to register client with the AuthService.
    rpc Register (AuthCredentials) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/auth/v1/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Register user"
            description: "Used to start user registeration process."
            tags: "Auth"
        };
    }

    // Used to complete verification.
    rpc Verify (VerifyReq) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/auth/v1/verify/{code}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Verify user"
            description: "Used to complete user registeration process."
            tags: "Auth"
        };
    }

    // Used for authentication.
    rpc Authenticate (AuthCredentials) returns (AuthResult) {
        option (google.api.http) = {
            post: "/auth/v1/authenticate"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Authenticate user"
            description: "Used to login user and provide tokens."
            tags: "Auth"
        };
    }

    // Used to get new token
    rpc RefreshToken (AuthResult) returns (AuthResult) {
        option (google.api.http) = {
            post: "/auth/v1/refresh_token"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Refresh tokens"
            description: "Used to refresh user access token."
            tags: "Auth"
        };
    }

    // Two types of reset scenarios:
    // 1. User forgets password. Using ForgotPassword he will get a temporary
    //    password in the email. Then he has to login using the temp password
    //    and then reset the password.
    // 2. Logged In user wants to reset his password. Currently, if the
    //    user has a valid token, we will allow reset if he correctly
    //    supplies the old password.
    rpc ResetPassword (UpdateCredentials) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/auth/v1/reset_password"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Reset password"
            description: "Used to reset user password."
            tags: "Auth"
        };
    }

    // In case if the user forgets the password, he will call this API
    // to send an email with a temporary password.
    rpc ForgotPassword (AuthCredentials) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/auth/v1/forgot_password/{username}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Forgot password"
            description: "Used to help user reset password if he forgets."
            tags: "Auth"
        };
    }

    // If the user did not initiate the ForgotPassword workflow,
    // he will use this API to reset his old password.
    rpc ReportUnauthorizedPwdChange (AuthCredentials) returns (AuthResponse) {
        option (google.api.http) = {
            post: "/auth/v1/report_pwd_change/{username}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Report Unauthorized Password change"
            description: "Can be used by users to report unauthorized forgot password requests."
            tags: "Auth"
        };
    }
}

